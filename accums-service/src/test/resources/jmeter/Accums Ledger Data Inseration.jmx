<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Accums Ledger Performance Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <longProp name="ThreadGroup.start_time">1508231356000</longProp>
        <longProp name="ThreadGroup.end_time">1508231356000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Ledger Header HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8585</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/accums-service/ledger-header</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="time" elementType="Argument">
              <stringProp name="Argument.name">time</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssZ)}</stringProp>
              <stringProp name="Argument.desc">dateTime</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counter_val" elementType="Argument">
              <stringProp name="Argument.name">counter_val</stringProp>
              <stringProp name="Argument.value">${__counter(FALSE,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">counter to increment value by 1</stringProp>
            </elementProp>
            <elementProp name="accumType" elementType="Argument">
              <stringProp name="Argument.name">accumType</stringProp>
              <stringProp name="Argument.value">${accumType}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accumName" elementType="Argument">
              <stringProp name="Argument.name">accumName</stringProp>
              <stringProp name="Argument.value">${accumName}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Ledger Header HTTP Request ${counter_value}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;accumulationHeaderDTO&quot;: {&#xd;
    &quot;accumType&quot;: &quot;COPAY ${random_value}&quot;,&#xd;
    &quot;allowedAmount&quot;: ${random_value},&#xd;
    &quot;claimLine&quot;: ${counter_value},&#xd;
    &quot;dateTimeProcessed&quot;: &quot;${time}&quot;,&#xd;
    &quot;dcn&quot;: &quot;CLM0000001&quot;,&#xd;
    &quot;memberIdentifier&quot;: &quot;M00${rand_value}&quot;,&#xd;
    &quot;network&quot;: &quot;IN&quot;,&#xd;
    &quot;networkTier&quot;: &quot;PPO&quot;,&#xd;
    &quot;planId&quot;: ${counter_value},&#xd;
    &quot;serviceDate&quot;: &quot;${time}&quot;,&#xd;
    &quot;serviceId&quot;: 10000,&#xd;
    &quot;serviceName&quot;: &quot;${time}&quot;,&#xd;
    &quot;subscriberId&quot;: &quot;A${random_value}&quot;,&#xd;
    &quot;unitOfMeasure&quot;: &quot;Dollars&quot;,&#xd;
    &quot;vendorTransactionCode&quot;: &quot;V${random_value}&quot;,&#xd;
	&quot;serviceLines&quot;: [&#xd;
       {&#xd;
        &quot;accumType&quot;: &quot;SPC COPAY&quot;,&#xd;
        &quot;amount&quot;: ${random_value},&#xd;
        &quot;costShareTier&quot;: &quot;PPO&quot;,&#xd;
        &quot;network&quot;: &quot;IN&quot;,&#xd;
        &quot;primaryLedgerEntryID&quot;: 1,&#xd;
        &quot;role&quot;: &quot;PTNT&quot;,&#xd;
        &quot;serviceDate&quot;: &quot;2017-10-24T00:57:39.090Z&quot;,&#xd;
        &quot;snapshotSummmary&quot;: ${random_value},&#xd;
        &quot;unitOfMeasure&quot;: &quot;Dollars&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;accumType&quot;: &quot;Individual OPX&quot;,&#xd;
        &quot;amount&quot;: ${random_value},&#xd;
        &quot;costShareTier&quot;: &quot;PPO&quot;,&#xd;
        &quot;network&quot;: &quot;INB&quot;,&#xd;
        &quot;primaryLedgerEntryID&quot;: 1,&#xd;
        &quot;role&quot;: &quot;PTNT&quot;,&#xd;
        &quot;serviceDate&quot;: &quot;2017-10-24T00:57:39.090Z&quot;,&#xd;
        &quot;snapshotSummmary&quot;: ${random_value},&#xd;
        &quot;unitOfMeasure&quot;: &quot;Dollars&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;accumType&quot;: &quot;Individual Ded&quot;,&#xd;
        &quot;amount&quot;: ${random_value},&#xd;
        &quot;costShareTier&quot;: &quot;PPO&quot;,&#xd;
        &quot;network&quot;: &quot;IN&quot;,&#xd;
        &quot;primaryLedgerEntryID&quot;: 1,&#xd;
        &quot;role&quot;: &quot;PTNT&quot;,&#xd;
        &quot;serviceDate&quot;: &quot;2017-10-24T00:57:39.090Z&quot;,&#xd;
        &quot;snapshotSummmary&quot;: ${random_value},&#xd;
        &quot;unitOfMeasure&quot;: &quot;Dollars&quot;&#xd;
      },&#xd;
      {&#xd;
	   &quot;accumType&quot;: &quot;Family Ded&quot;,&#xd;
        &quot;amount&quot;: ${random_value},&#xd;
        &quot;costShareTier&quot;: &quot;PPO&quot;,&#xd;
        &quot;network&quot;: &quot;INB&quot;,&#xd;
        &quot;primaryLedgerEntryID&quot;: 1,&#xd;
        &quot;role&quot;: &quot;PTNT&quot;,&#xd;
        &quot;serviceDate&quot;: &quot;2017-10-24T00:57:39.090Z&quot;,&#xd;
        &quot;snapshotSummmary&quot;: ${random_value},&#xd;
        &quot;unitOfMeasure&quot;: &quot;Dollars&quot;&#xd;
      },&#xd;
      {&#xd;
	   &quot;accumType&quot;: &quot;Family OPX&quot;,&#xd;
        &quot;amount&quot;: 50,&#xd;
        &quot;costShareTier&quot;: &quot;PPO&quot;,&#xd;
        &quot;network&quot;: &quot;INB&quot;,&#xd;
        &quot;primaryLedgerEntryID&quot;: 1,&#xd;
        &quot;role&quot;: &quot;PTNT&quot;,&#xd;
        &quot;serviceDate&quot;: &quot;2017-10-24T00:57:39.090Z&quot;,&#xd;
        &quot;snapshotSummmary&quot;: ${random_value},&#xd;
        &quot;unitOfMeasure&quot;: &quot;Dollars&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">8585</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">accums-service/ledger-header</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
            <hashTree/>
            <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <boolProp name="saveHeaders">false</boolProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-application-context</stringProp>
                  <stringProp name="Header.value">application:8585</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">50</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rand_value</stringProp>
            </RandomVariableConfig>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">9999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">counter_value</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Global Random Variable" enabled="true">
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="minimumValue">50</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">random_value</stringProp>
        </RandomVariableConfig>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
